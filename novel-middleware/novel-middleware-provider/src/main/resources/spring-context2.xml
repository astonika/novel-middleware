<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx.xsd 
            http://www.springframework.org/schema/jdbc 
            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd 
            ">

	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath*:jdbc.properties,classpath*:zookeeper.properties" />

	<bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close" abstract="true">
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="poolSize" value="10" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
		<property name="borrowConnectionTimeout" value="60" />
		<property name="reapTimeout" value="20" />
		<!-- 最大空闲时间 -->
		<property name="maxIdleTime" value="60" />
		<property name="maintenanceInterval" value="60" />
		<property name="loginTimeout" value="60" />
		<property name="logWriter" value="60" />
		<property name="testQuery">
			<value>select 1</value>
		</property>
	</bean>
	<!-- master源 -->
	<bean id="xa.dataSource" parent="abstractXADataSource">
		<property name="uniqueResourceName">
			<value>master</value>
		</property>
		<property name="xaProperties">
			<props>
				<prop key="URL">${url}</prop>
				<prop key="user">${user}</prop>
				<prop key="password">${password}</prop>
			</props>
		</property>
	</bean>
	<!-- slave源 -->
	<!-- <bean id="slaveSource" parent="abstractXADataSource"> -->
	<!-- <property name="uniqueResourceName"> -->
	<!-- <value>slave</value> -->
	<!-- </property> -->
	<!-- <property name="xaProperties"> -->
	<!-- <props> -->
	<!-- <prop key="URL">${url}</prop> -->
	<!-- <prop key="user">${user}</prop> -->
	<!-- <prop key="password">${password}</prop> -->
	<!-- </props> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- <bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close"> -->
	<!-- <property name="uniqueResourceName" value="XA1DBMS1" /> -->
	<!-- <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" /> -->
	<!-- <property name="xaProperties"> -->
	<!-- <props> -->
	<!-- <prop key="URL">${dataPortal_mysql_jdbc_url}</prop> -->
	<!-- <prop key="user">${dataPortal_mysql_jdbc_user}</prop> -->
	<!-- <prop key="password">${dataPortal_mysql_jdbc_password}</prop> -->
	<!-- </props> -->
	<!-- </property> -->
	<!-- <property name="poolSize" value="3" /> -->
	<!-- <property name="minPoolSize" value="3" /> -->
	<!-- <property name="maxPoolSize" value="5" /> -->
	<!-- </bean> -->

	<bean id="amq.connectionFactory" class="org.apache.activemq.spring.ActiveMQXAConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>

	<bean id="queue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="test.queue" />
	</bean>

	<bean id="xa.connectionFactory" class="com.atomikos.jms.AtomikosConnectionFactoryBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="amq1" />
		<property name="xaConnectionFactory" ref="amq.connectionFactory" />
	</bean>

	<bean id="jta.transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager">
			<bean class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
				<property name="forceShutdown" value="false" />
			</bean>
		</property>
		<property name="userTransaction">
			<bean class="com.atomikos.icatch.jta.UserTransactionImp">
				<property name="transactionTimeout" value="300" />
			</bean>
		</property>
	</bean>
	<tx:annotation-driven transaction-manager="jta.transactionManager" />
<!-- 	<jdbc:initialize-database data-source="xa.dataSource" enabled="true"> -->
<!-- 		<jdbc:script location="classpath:schema.sql" /> -->
<!-- 	</jdbc:initialize-database> -->

	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="xa.connectionFactory" />
		<property name="sessionTransacted" value="true" />
	</bean>

<!-- 	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> -->
<!-- 		<property name="dataSource" ref="xa.dataSource" /> -->
<!-- 	</bean> -->

	<!--用户监视h2 -->
<!-- 	<bean id="h2Server" class="org.h2.tools.Server" factory-method="createTcpServer" init-method="start" destroy-method="stop" depends-on="h2WebServer"> -->
<!-- 		<constructor-arg value="-tcp,-tcpAllowOthers,-tcpPort,9092" /> -->
<!-- 	</bean> -->
<!-- 	<bean id="h2WebServer" class="org.h2.tools.Server" factory-method="createWebServer" init-method="start" destroy-method="stop" lazy-init="false" depends-on="xa.dataSource"> -->
<!-- 		<constructor-arg value="-web,-webPort,8082" /> -->
<!-- 	</bean> -->

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="xa.dataSource" />
		<!-- <property name="configLocation" value="mybatis-config.xml"></property> -->
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/company/project/mapper/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.company.project.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use DataSourceTransactionManager for global tx -->
<!-- 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!-- 		<property name="dataSource" ref="dataSource" /> -->
<!-- 	</bean> -->

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="jta.transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.company.project.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	<import resource="classpath:spring-dubbo-provider.xml" />
<!-- 	<import resource="classpath:spring-activemq.xml" /> -->
</beans>